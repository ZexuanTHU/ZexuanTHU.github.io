<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-19T23:27:38+08:00</updated><id>http://localhost:4000/</id><title type="html">ZexuanTHU’s Blog</title><subtitle>Code Love Life</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-05-19T22:05:38+08:00</published><updated>2018-05-19T22:05:38+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Fix The Conflict Of Uglifyjs And Vue Cli Plus Element Ui During Npm Run Build</title><link href="http://localhost:4000/2017/11/17/fix-the-conflict-of-UglifyJs-and-vue-cli-plus-element-ui-during-npm-run-build.html" rel="alternate" type="text/html" title="Fix The Conflict Of Uglifyjs And Vue Cli Plus Element Ui During Npm Run Build" /><published>2017-11-17T00:00:00+08:00</published><updated>2017-11-17T00:00:00+08:00</updated><id>http://localhost:4000/2017/11/17/fix-the-conflict-of-UglifyJs-and-vue-cli-plus-element-ui-during-npm-run-build</id><content type="html" xml:base="http://localhost:4000/2017/11/17/fix-the-conflict-of-UglifyJs-and-vue-cli-plus-element-ui-during-npm-run-build.html">&lt;h1 id=&quot;解决-vue-cli--element-ui-在-npm-run-build-时与-uglifyjs-冲突的问题&quot;&gt;解决 vue-cli + element-ui 在 npm run build 时与 UglifyJs 冲突的问题&lt;/h1&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;我在最近软工课程的大作业：给贵系写一个体育赛事报名系统中，选用了 Vue  + element-ui 作为前端，Django 作为后端的解决方案。
由于几周来演示过程中普通用户页面一直用的是前端的开发环境（方便快捷），所以很久没有执行过 build 操作了。
结果今天展示前临时想要 build 一下， 发现 npm 报错了，错误如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR in static/js/vendor.f1c68aa2d5e85847d30e.js from UglifyJs
Unexpected token name «i», expected punc «;» [./node_modules/element-ui/src/utils/merge.js:2,0][static/js/vendor.f1c68aa2d5e85847d30e.js:17064,11]
Build failed with errors.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;就 error massage 来看，应该是 &lt;code class=&quot;highlighter-rouge&quot;&gt;UglifyJs&lt;/code&gt; 这个 Module 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;element-ui&lt;/code&gt; 存在冲突。遂 google 之。&lt;/p&gt;
&lt;h2 id=&quot;尝试1&quot;&gt;尝试1&lt;/h2&gt;
&lt;p&gt;结果首先在 UglifyJs 的 github issues #78 找到了这样一个解决方案：
由于 UglifyJs 只支持 ES5 而 element-ui 可能引入了一部分 ES6 的写法，所以导致 webpack 打包失败。
issue 里最后给出的解决方案是用 beta 版本的Uglify-es 来代替 UglifyJs（Beta 版本引入了对 ES2015+）的支持。需要在前端工作目录下用执行命令 npm i -D uglifyjs-webpack-plugin@beta。
不过在尝试过后，发现 build error 的问题依然没有解决。&lt;/p&gt;
&lt;h2 id=&quot;尝试2&quot;&gt;尝试2&lt;/h2&gt;
&lt;p&gt;在深入查找问题所在后，决定用 bable 来解析 element-ui。 
要完成此操作只需要修改前端文件夹下的build/webpack.base.conf.js 文件即可，修改如下：
修改前&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//注意elementUI的源码使用ES&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;需要解析&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('src')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('test')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('/node_modules/element-ui/src')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('/node_modules/element-ui/packages')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;修改后&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//注意elementUI的源码使用ES&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;需要解析&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('src')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('test')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('/node_modules/element-ui/src')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;resolve('/node_modules/element-ui/packages')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;相当于将 element-ui 加入需要 babel 解析的包中。&lt;/p&gt;

&lt;p&gt;之后再次执行 npm run build， build 成功。&lt;/p&gt;</content><author><name></name></author><summary type="html">解决 vue-cli + element-ui 在 npm run build 时与 UglifyJs 冲突的问题 问题 我在最近软工课程的大作业：给贵系写一个体育赛事报名系统中，选用了 Vue + element-ui 作为前端，Django 作为后端的解决方案。 由于几周来演示过程中普通用户页面一直用的是前端的开发环境（方便快捷），所以很久没有执行过 build 操作了。 结果今天展示前临时想要 build 一下， 发现 npm 报错了，错误如下： ERROR in static/js/vendor.f1c68aa2d5e85847d30e.js from UglifyJs Unexpected token name «i», expected punc «;» [./node_modules/element-ui/src/utils/merge.js:2,0][static/js/vendor.f1c68aa2d5e85847d30e.js:17064,11] Build failed with errors. 就 error massage 来看，应该是 UglifyJs 这个 Module 和 element-ui 存在冲突。遂 google 之。 尝试1 结果首先在 UglifyJs 的 github issues #78 找到了这样一个解决方案： 由于 UglifyJs 只支持 ES5 而 element-ui 可能引入了一部分 ES6 的写法，所以导致 webpack 打包失败。 issue 里最后给出的解决方案是用 beta 版本的Uglify-es 来代替 UglifyJs（Beta 版本引入了对 ES2015+）的支持。需要在前端工作目录下用执行命令 npm i -D uglifyjs-webpack-plugin@beta。 不过在尝试过后，发现 build error 的问题依然没有解决。 尝试2 在深入查找问题所在后，决定用 bable 来解析 element-ui。 要完成此操作只需要修改前端文件夹下的build/webpack.base.conf.js 文件即可，修改如下： 修改前 module: { rules: [ { test: /\.js$/, loader: 'babel-loader',//注意elementUI的源码使用ES6需要解析 include: [resolve('src'), resolve('test'),resolve('/node_modules/element-ui/src'),resolve('/node_modules/element-ui/packages')] }, 修改后 module: { rules: [ { test: /\.js$/, loader: 'babel-loader',//注意elementUI的源码使用ES6需要解析 include: [resolve('src'), resolve('test'),resolve('/node_modules/element-ui/src'),resolve('/node_modules/element-ui/packages')] }, 相当于将 element-ui 加入需要 babel 解析的包中。</summary></entry><entry><title type="html">How To Set Vps And Shadowsocks From Zero</title><link href="http://localhost:4000/2017/08/02/how-to-set-vps-and-shadowsocks-from-zero.html" rel="alternate" type="text/html" title="How To Set Vps And Shadowsocks From Zero" /><published>2017-08-02T00:00:00+08:00</published><updated>2017-08-02T00:00:00+08:00</updated><id>http://localhost:4000/2017/08/02/how-to-set-vps-and-shadowsocks-from-zero</id><content type="html" xml:base="http://localhost:4000/2017/08/02/how-to-set-vps-and-shadowsocks-from-zero.html">&lt;h1 id=&quot;how-to-set-vps-and-shadowsocks-from-zero&quot;&gt;How to set VPS and ShadowSocks from zero&lt;/h1&gt;
&lt;p&gt;This is a handbook for totally rookie guy who want to browsw Google, Youtube or other already-banned website or webservice in mainland, China.&lt;/p&gt;

&lt;h2 id=&quot;part-0-before-start&quot;&gt;PART 0: BEFORE START&lt;/h2&gt;
&lt;p&gt;Before start, you need to check and prepare following items ready:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A VPS (Virtual Personal Server) running abroad.&lt;/li&gt;
  &lt;li&gt;A ShadowSocks account(server) link to your VPS host address.
If this two steps make you confused, just Google it, tons of guides already there.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;**&lt;em&gt;PLUS: IF YOU ARE A GIRL WHO DATES WITH A GUY WHO KNOW “CS”, PLEASE JUMP TO PART 2 DIRECTLY :)&lt;/em&gt;&lt;/strong&gt;**&lt;/p&gt;

&lt;h2 id=&quot;part-1-vps&quot;&gt;PART 1: VPS&lt;/h2&gt;
&lt;p&gt;For lightweight apllication, The VPS service I recommend is “Bandwagon Host”, which is steady enough, user-friendly enough
and cheap enough for most application scenario.&lt;/p&gt;

&lt;p&gt;After you order your Bandwagon VPS service successfully, you will obtain a access to Client Area, a host address(e.g 88.888.888.888),
and a SSH port to visit the host address.&lt;/p&gt;

&lt;p&gt;So, sign in your Client Area and choose your service, then click the “KiwiVM Control Panel” button. Bingo! Now you are in the VM control panel.
The main page show some basic info about your VPS, such as Physical location(depends on the engine room you choose when order the service), IP address of your
VPS, SSH port, etc.&lt;/p&gt;

&lt;p&gt;BUT! ALL this info are all useless if you only want to access banned interent service:) (Please notice that I never said they are useless if you want use this
VPS as your own blog’s server or for any other
high-level usage)&lt;/p&gt;

&lt;p&gt;what we need here is on the very bottom of the control panel, “ShadowSocks Server”. Click the button and the content on this page offer a automation script to
deploy a ShadowSocks Server on your VM. BUT:) It only support CentOS 6.x, which is not the default OS of when you got your fresh VM. The good news is Bandwagon
allowed you unrestricted reinstall OS on your VM. So what we need to do is scan up the control panel and find the button “Install new OS”, and choose any CentOS
6.x system(personal recommendation: CentOS 6 x86_64 with bbr) and make sure our VM is NOT running(click the “stop” button in the main page). Now reinstal your OS
and enjoy a cup of coffee to wait the new OS installed.&lt;/p&gt;

&lt;p&gt;Now, back to the ShadowSocks Server page and run the automation script. Be patient for a moment, then your ShadowSocks Server deployed automatically. Please
remember the 3 parameters on the screen: Shadowsocks server encryption, Shadowsocks server port, Shadowsocks server password.&lt;/p&gt;

&lt;h2 id=&quot;part-2-shadowsocks&quot;&gt;PART 2: ShadowSocks&lt;/h2&gt;
&lt;p&gt;After we deployed our ShadowSocks Server, the most difficult step to access the free internet is done. Now we need to download and install the ShadowSocks GUI
software on our PC or Mac from https://shadowsocks.org/en/download/clients.html It’s easy:)&lt;/p&gt;

&lt;p&gt;Then run your GUI software, input your IP address, Shadowsocks server encryption, Shadowsocks server port, Shadowsocks server password(If you don’t know, ask
your server administrator), then fill in the Proxy Port field with 1080.&lt;/p&gt;

&lt;p&gt;After click the “OK” button, choose “global mode” at first and click to start the ShadowSocks service, now type “Google.com” into your web browser’s nevigate
bar and snjoy the free internet access(Or you can choose “PAC mode” if you want to browse inside and outside website at the same time)&lt;/p&gt;

&lt;h2 id=&quot;part-3-using-on-iphone&quot;&gt;PART 3: Using on iPhone&lt;/h2&gt;
&lt;p&gt;Install App “Wingy” from App Store(It is a ShadowSocks-like app, we use it to access our ShadowSocks Server while ShadowSocks APP can’t be approved in Chinese
mainland App Store and please choose the free version while the old paid app was develop for old iOS). Like operation on PC or Mac, add a new configuration and
type in host(IP address), Port(Shadowsocks server port), password(ShadowSocks server password), left other fields in default and save configuration.&lt;/p&gt;

&lt;p&gt;Click the connect button on the main page and enjoy your web travel on your smartphone:)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;WELCOME TO VIEW MY GITHUB HOME PAGE https://github.com/ZexuanTHU and STAR THIS ATRICLE.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">How to set VPS and ShadowSocks from zero This is a handbook for totally rookie guy who want to browsw Google, Youtube or other already-banned website or webservice in mainland, China.</summary></entry></feed>